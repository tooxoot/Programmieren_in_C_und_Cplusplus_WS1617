// Decalration of class Matrix.
// Member functions are defined in matrix.cpp.
#include <cstring>
#include <exception>
#include "math.h"
#include <exception>
#include <iostream>
#include <stdlib.h>
/**
 * This class implements a two-dimensional Matrix including different mathematic
 * operations.
 */
class Matrix{
private:
  int row, col; /**< These integers store the row and col(umn) count of the matrix.*/
  float **matrix; /**< This array stores the values of the matrix */
public:

  /**
   * Initializes a row x col matrix object.
   * Throws Exception for row,col < 1.
   *
   * @param row This float defined the Matrix' number of rows.
   * @param col This float defined the Matrix' number of columns.
   */
  Matrix(const float row, const float col);

  /**
   * Initializes the matrix object like the Matrix(float, float) constructor. But
   * additionally copies the values from a corresponding two dimensional float array.
   * Throws Exception for row,col < 1.
   *
   * @param row This float defined the Matrix' number of rows.
   * @param col This float defined the Matrix' number of columns.
   * @param matrix This 5x5 float array contains values copied into the matrix object.
   */
  Matrix(float matrix[5][5]);

  /**
   * Copy-constructor. Does nothing if *this is equal to copiedMatrix.
   *
   * @param copiedMatrix A reference to the Matrix object which is copied.
   */
  Matrix(const Matrix& matrix);
  /**
   * Copy-assignment. Does nothing if *this is equal to copiedMatrix.
   *
   * @param copiedMatrix A reference to the Matrix object which is copied.
   * @return The *this reference.
   */
  Matrix& operator=(const Matrix& copiedMatrix);


  /**
   * This function is used to by the copie-constructor and -assignment.
   *
   * @param copiedMatrix A reference to the Matrix object which is copied.
   */
  void copy(const Matrix& copiedMatrix);

  /**
   * Move-constructor. Does nothing if *this is equal to movedMatrix.
   *
   * @param movedMatrix A reference to the Matrix object which is moved.
   */
  Matrix(Matrix&& movedMatrix);
  /**
   * Move-assignment. Does nothing if *this is equal to movedMatrix.
   *
   * @param movedMatrix A reference to the Matrix object which is moved.
   */
  Matrix& operator=(Matrix&& movedMatrix);

  /**
   * This function is used to by the move-constructor and -assignment.
   *
   * @param movedMatrix A reference to the Matrix object which is moved.
   * @return The *this reference.
   */
  void move(Matrix& movedMatrix);


  /**
   * This destructor destroys the complete two-dimensional matrix array.
   */
  ~Matrix();

  /**
   * Fills every element a of the matrix with the sum of its zerobased row and column index.
   * Throws exception if this Matrix is not properly allocated.
   */
  void fill();

  /**
   * Adds the given value to the element found in the given row and column.
   * Throws exception if this Matrix is not properly allocated.
   *
   * @param value The value added to the matrix element.
   * @param row   The zerobased row-index.
   * @param col   The zerobased column-index
   */
  void addValue(const float value, const int row, const int col);

  //7. IMPLEMENTED (in cpp as non Member function)

  /**
   * Computes the determinant of this Matrix.
   * Throws exception if this Matrix is not properly allocated or if it is not a
   * square matrix.
   *
   * @return The computed determinant.
   */
  float computeDeterminant() const;

  /**
   * Returns the Minor-Matrix that is generated by removing the given row and column.
   * Throws exception if this Matrix is not properly allocated.
   * Throws exception if the given row- and column-indexes are invalid.
   *
   * @param  row The zerobased row-index.
   * @param  col The zerobased column-index.
   * @return     The Minor-Matrix.
   */
  Matrix getMinor(int row, int col) const;

  /**
   * Overloads the + operator to define float + Matrix such as the resulting Matrix
   * is equal to: f * identity + matrix.
   * Throws exception if the referenced Matrix is not properly allocated.
   *
   * @return The resulting Matrix.
   */
  friend Matrix operator+(const float f, const Matrix& matrix);

  /**
   * Overloads the + operator to define Matrix + float such as the resulting Matrix
   * is equal to: f * identity + matrix.
   * Throws exception if the referenced Matrix is not properly allocated.
   *
   * @return The resulting Matrix.
   */
  friend Matrix operator+(const Matrix& matrix, const float f);

  /**
   * Overloads the += operator to define Matrix += float such as this Matrix will
   * be equal to: f * identity + thisMatrix.
   * Throws exception if this Matrix is not properly allocated.
   *
   * @return: The *this reference.
   */
  Matrix& operator+= (const float f);

  /**
   * Overloads the - operator to define Matrix - float such as the resulting Matrix
   * is equal to: matrix - f * identity.
   * Throws exception if the referenced Matrix is not properly allocated.
   *
   * @return The resulting Matrix.
   */
  friend Matrix operator-(const Matrix& matrix, const float f);

  /**
   * Overloads the - operator to define float - Matrix such as the resulting Matrix
   * is equal to: f * identity - matrix.
   * Throws exception if the referenced Matrix is not properly allocated.
   *
   * @return The resulting Matrix.
   */
  friend Matrix operator-(const float f, const Matrix& matrix);

  /**
   * Overloads the -= operator to define Matrix -= float such as this Matrix will
   * be equal to: thisMatrix - f * identity.
   * Throws exception if this Matrix is not properly allocated.
   *
   * @return: The *this reference.
   */
  Matrix& operator-=(const float f);

  /**
   * Overloads the * operator to define Matrix * float such as the resulting Matrix
   * is equal to: f * matrix.
   * Throws exception if the referenced Matrix is not properly allocated.
   *
   * @return The resulting Matrix.
   */
  friend Matrix operator*(const float f, const Matrix& matrix);

  /**
   * Overloads the * operator to define float * Matrix such as the resulting Matrix
   * is equal to: f * matrix.
   * Throws exception if the referenced Matrix is not properly allocated.
   *
   * @return The resulting Matrix.
   */
  friend Matrix operator*(const Matrix& matrix, const float f);

  /**
   * Overloads the *= operator to define Matrix *= float such as this Matrix will
   * be equal to: f * thisMatrix.
   * Throws exception if this Matrix is not properly allocated.
   *
   * @return: The *this reference.
   */
  Matrix& operator*=(const float f);

  /**
   * Overloads the + operator to define Matrix + Matrix such as the resulting Matrix
   * is equal to: matrix + matrix.
   * Throws exception if matrix1 or matrix2 are not properly allocated
   * Throws ecxeption if the Matrices dimensions are incompatible.
   *
   * @return The resulting Matrix.
   */
  friend Matrix operator+(const Matrix& matrix1, const Matrix& matrix2);

  /**
   * Overloads the += operator to define Matrix += Matrix such as this Matrix will
   * be equal to: referencedMatrix + thisMatrix.
   * Throws exception if this Matrix or matrix2 are not properly allocated
   * Throws ecxeption if the Matrices dimensions are incompatible.
   *
   * @return: The *this reference.
   */
  Matrix& operator+=(const Matrix& matrix2);

  /**
   * Overloads the - operator to define Matrix - Matrix such as the resulting Matrix
   * is equal to: matrix - matrix.
   * Throws exception if matrix1 or matrix2 are not properly allocated
   * Throws ecxeption if the Matrices dimensions are incompatible.
   *
   * @return The resulting Matrix.
   */
  friend Matrix operator-(const Matrix& matrix1, const Matrix& matrix2);

  /**
   * Overloads the -= operator to define Matrix -= Matrix such as this Matrix will
   * be equal to: thisMatrix - referencedMatrix.
   * Throws exception if this Matrix or matrix2 are not properly allocated
   * Throws ecxeption if the Matrices dimensions are incompatible.
   *
   * @return: The *this reference.
   */
  Matrix& operator-=(const Matrix& matrix2);

  /**
   * Overloads the * operator to define Matrix * Matrix such as the resulting Matrix
   * is equal to: matrix * matrix.
   * Throws exception if matrix1 or matrix2 are not properly allocated
   * Throws ecxeption if the first matrix' column count differs from the second matrix'
   * row count.
   *
   * @return The resulting Matrix.
   */
  friend Matrix operator*(const Matrix& matrix1, const Matrix& matrix2);

  /**
   * Computes the inversed matrix tho this one.
   * Throws exception if this Matrix is not properly allocated.
   * Throws exception if this matrix is not a square matrix.
   * Throws exception if this matrix is neither a 2x2 or a 3x3 matrix.
   * Throws exception if this matrix' determinant is 0.
   *
   * @return The inversed Matirx.
   */
  Matrix computeInverse() const;

  /**
   * Defines a Matrix division for properly a defined divisor Matrix.
   * Throws exception if this Matrix  or the divisor is not properly allocated.
   * Also throws exception if *this * divisor.computeInverse() would.
   *
   * @param  divisor The divisor matrix.
   * @return The resulting Matrix equaly to tthisMatrix * divisorMatrix^(-1)
   */
  Matrix divideMatrices(const Matrix& divisor) const;


  /**
   * Getter for the underlying matrix array.
   * @return The float** to the underlying matrix array.
   */
  float** getMatrix() const;

  /**
   * Getter for the row count.
   * @return Returns the matrix' number of rows.
   */
  int getRow() const;

  /**
   * Getter for the column count.
   * @return Returns the matrix' number of columns.
   */
  int getCol() const;

  /**
   * Checks if this Matrix is properly allocated.
   * Throws exception if this Matrix is not properly allocated.
   */
  void checkAllocation() const;
};

/**
 * This class implements the exception which is thrown by the Matrix class' methods.
 */
class MatrixException: public std::exception {
private:
  char* message; /**< This Cstring stores the error message */
public:

  /**
   * This constructor initializes a new MatrixException with a given error message.
   *
   * @param message A CString description of the error.
   */
  MatrixException(char* const message){
    this->message = message;
  }

  /**
   * This method returns this exception's error description.
   *
   * @return This exception's error description.
   */
  const char* what() const throw(){
    return message;
  }
};
#include "matrix.cpp"
